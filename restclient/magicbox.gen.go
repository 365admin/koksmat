// Package magicbox provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package restclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// ModelRecipient defines model for ModelRecipient.
type ModelRecipient struct {
	Alias                     *string            `json:"Alias,omitempty"`
	DisplayName               *string            `json:"DisplayName,omitempty"`
	DistinguishedName         *string            `json:"DistinguishedName,omitempty"`
	EmailAddresses            *[]string          `json:"EmailAddresses"`
	ExternalDirectoryObjectId *string            `json:"ExternalDirectoryObjectId,omitempty"`
	Identity                  *string            `json:"Identity,omitempty"`
	RecipientTypeDetails      *string            `json:"RecipientTypeDetails,omitempty"`
	CreatedAt                 *time.Time         `json:"created_at,omitempty"`
	Id                        *PrimitiveObjectID `json:"id"`
	UpdatedAt                 *time.Time         `json:"updated_at,omitempty"`
}

// ModelSharedMailbox defines model for ModelSharedMailbox.
type ModelSharedMailbox struct {
	CustomAttribute1   *string            `json:"CustomAttribute1,omitempty"`
	DisplayName        *string            `json:"DisplayName,omitempty"`
	ExchangeObjectId   *string            `json:"ExchangeObjectId,omitempty"`
	PrimarySmtpAddress *string            `json:"PrimarySmtpAddress,omitempty"`
	CreatedAt          *time.Time         `json:"created_at,omitempty"`
	Id                 *PrimitiveObjectID `json:"id"`
	UpdatedAt          *time.Time         `json:"updated_at,omitempty"`
}

// ModelSharedMailboxNewResponce defines model for ModelSharedMailboxNewResponce.
type ModelSharedMailboxNewResponce struct {
	PrimarySmtpAddress *string `json:"primarySmtpAddress,omitempty"`
}

// PowershellDomain defines model for PowershellDomain.
type PowershellDomain struct {
	DomainName *string `json:"DomainName,omitempty"`
	DomainType *string `json:"DomainType,omitempty"`
	IsValid    *bool   `json:"IsValid,omitempty"`
}

// PrimitiveObjectID defines model for PrimitiveObjectID.
type PrimitiveObjectID = []int

// RestErrResponse defines model for RestErrResponse.
type RestErrResponse struct {
	// Code Application-specific error code.
	Code *int `json:"code,omitempty"`

	// Context Application context.
	Context *map[string]interface{} `json:"context,omitempty"`

	// Error Error message.
	Error *string `json:"error,omitempty"`

	// Status Status text.
	Status *string `json:"status,omitempty"`
}

// RestapiInfoResponse defines model for RestapiInfoResponse.
type RestapiInfoResponse struct {
	Tenant  *string `json:"tenant,omitempty"`
	Version *string `json:"version,omitempty"`
}

// RestapiSharedMailboxAddEmailRquest defines model for RestapiSharedMailboxAddEmailRquest.
type RestapiSharedMailboxAddEmailRquest struct {
	Smtpaddress *string `json:"smtpaddress,omitempty"`
}

// RestapiSharedMailboxAddMemberRquest defines model for RestapiSharedMailboxAddMemberRquest.
type RestapiSharedMailboxAddMemberRquest struct {
	Members *[]string `json:"members"`
}

// RestapiSharedMailboxAddMemberRquestType2 defines model for RestapiSharedMailboxAddMemberRquestType2.
type RestapiSharedMailboxAddMemberRquestType2 struct {
	Owners *[]string `json:"owners"`
}

// RestapiSharedMailboxAddMemberRquestType3 defines model for RestapiSharedMailboxAddMemberRquestType3.
type RestapiSharedMailboxAddMemberRquestType3 struct {
	Readers *[]string `json:"readers"`
}

// RestapiSharedMailboxNewRequest defines model for RestapiSharedMailboxNewRequest.
type RestapiSharedMailboxNewRequest struct {
	Alias       *string   `json:"alias,omitempty"`
	DisplayName *string   `json:"displayName,omitempty"`
	Members     *[]string `json:"members"`
	Name        *string   `json:"name,omitempty"`
	Owners      *[]string `json:"owners"`
	Readers     *[]string `json:"readers"`
}

// RestapiSharedMailboxUpdateRequest defines model for RestapiSharedMailboxUpdateRequest.
type RestapiSharedMailboxUpdateRequest struct {
	DisplayName *string `json:"displayName,omitempty"`
}

// RestapiSharedMailboxUpdateRequestType2 defines model for RestapiSharedMailboxUpdateRequestType2.
type RestapiSharedMailboxUpdateRequestType2 struct {
	Smtpaddress *string `json:"smtpaddress,omitempty"`
}

// RestapiSigninRequest defines model for RestapiSigninRequest.
type RestapiSigninRequest struct {
	Appkey *string `json:"appkey,omitempty"`
}

// RestapiSigninResponse defines model for RestapiSigninResponse.
type RestapiSigninResponse struct {
	Token *string `json:"token,omitempty"`
}

// KoksmatrestapiSigninJSONRequestBody defines body for KoksmatrestapiSignin for application/json ContentType.
type KoksmatrestapiSigninJSONRequestBody = RestapiSigninRequest

// KoksmatrestapiCreateSharedMailboxJSONRequestBody defines body for KoksmatrestapiCreateSharedMailbox for application/json ContentType.
type KoksmatrestapiCreateSharedMailboxJSONRequestBody = RestapiSharedMailboxNewRequest

// KoksmatrestapiUpdateSharedMailboxJSONRequestBody defines body for KoksmatrestapiUpdateSharedMailbox for application/json ContentType.
type KoksmatrestapiUpdateSharedMailboxJSONRequestBody = RestapiSharedMailboxUpdateRequest

// KoksmatrestapiAddSharedMailboxMembersJSONRequestBody defines body for KoksmatrestapiAddSharedMailboxMembers for application/json ContentType.
type KoksmatrestapiAddSharedMailboxMembersJSONRequestBody = RestapiSharedMailboxAddMemberRquest

// KoksmatrestapiSetSharedMailboxOwnersJSONRequestBody defines body for KoksmatrestapiSetSharedMailboxOwners for application/json ContentType.
type KoksmatrestapiSetSharedMailboxOwnersJSONRequestBody = RestapiSharedMailboxAddMemberRquestType2

// KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressJSONRequestBody defines body for KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress for application/json ContentType.
type KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressJSONRequestBody = RestapiSharedMailboxUpdateRequestType2

// KoksmatrestapiAddSharedMailboxReadersJSONRequestBody defines body for KoksmatrestapiAddSharedMailboxReaders for application/json ContentType.
type KoksmatrestapiAddSharedMailboxReadersJSONRequestBody = RestapiSharedMailboxAddMemberRquestType3

// KoksmatrestapiAddSharedMailboxEmailJSONRequestBody defines body for KoksmatrestapiAddSharedMailboxEmail for application/json ContentType.
type KoksmatrestapiAddSharedMailboxEmailJSONRequestBody = RestapiSharedMailboxAddEmailRquest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// KoksmatrestapiSignin request with any body
	KoksmatrestapiSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiSignin(ctx context.Context, body KoksmatrestapiSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiResolveAddress request
	KoksmatrestapiResolveAddress(ctx context.Context, address string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiGetInfo request
	KoksmatrestapiGetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiGetDomains request
	KoksmatrestapiGetDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiListSharedMailbox request
	KoksmatrestapiListSharedMailbox(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiCreateSharedMailbox request with any body
	KoksmatrestapiCreateSharedMailboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiCreateSharedMailbox(ctx context.Context, body KoksmatrestapiCreateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiDeleteSharedMailbox request
	KoksmatrestapiDeleteSharedMailbox(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiGetSharedMailbox request
	KoksmatrestapiGetSharedMailbox(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiUpdateSharedMailbox request with any body
	KoksmatrestapiUpdateSharedMailboxWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiUpdateSharedMailbox(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiRemoveSharedMailboxMembers request
	KoksmatrestapiRemoveSharedMailboxMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiAddSharedMailboxMembers request with any body
	KoksmatrestapiAddSharedMailboxMembersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiAddSharedMailboxMembers(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiSetSharedMailboxOwners request with any body
	KoksmatrestapiSetSharedMailboxOwnersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiSetSharedMailboxOwners(ctx context.Context, id string, body KoksmatrestapiSetSharedMailboxOwnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress request with any body
	KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiRemoveSharedMailboxReaders request
	KoksmatrestapiRemoveSharedMailboxReaders(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiAddSharedMailboxReaders request with any body
	KoksmatrestapiAddSharedMailboxReadersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiAddSharedMailboxReaders(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxReadersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiRemoveSharedMailboxEmail request
	KoksmatrestapiRemoveSharedMailboxEmail(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KoksmatrestapiAddSharedMailboxEmail request with any body
	KoksmatrestapiAddSharedMailboxEmailWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	KoksmatrestapiAddSharedMailboxEmail(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) KoksmatrestapiSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiSignin(ctx context.Context, body KoksmatrestapiSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiResolveAddress(ctx context.Context, address string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiResolveAddressRequest(c.Server, address)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiGetInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiGetInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiGetDomains(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiGetDomainsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiListSharedMailbox(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiListSharedMailboxRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiCreateSharedMailboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiCreateSharedMailboxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiCreateSharedMailbox(ctx context.Context, body KoksmatrestapiCreateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiCreateSharedMailboxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiDeleteSharedMailbox(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiDeleteSharedMailboxRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiGetSharedMailbox(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiGetSharedMailboxRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiUpdateSharedMailboxWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiUpdateSharedMailboxRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiUpdateSharedMailbox(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiUpdateSharedMailboxRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiRemoveSharedMailboxMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiRemoveSharedMailboxMembersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiAddSharedMailboxMembersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiAddSharedMailboxMembersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiAddSharedMailboxMembers(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiAddSharedMailboxMembersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiSetSharedMailboxOwnersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiSetSharedMailboxOwnersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiSetSharedMailboxOwners(ctx context.Context, id string, body KoksmatrestapiSetSharedMailboxOwnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiSetSharedMailboxOwnersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiRemoveSharedMailboxReaders(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiRemoveSharedMailboxReadersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiAddSharedMailboxReadersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiAddSharedMailboxReadersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiAddSharedMailboxReaders(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxReadersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiAddSharedMailboxReadersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiRemoveSharedMailboxEmail(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiRemoveSharedMailboxEmailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiAddSharedMailboxEmailWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiAddSharedMailboxEmailRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KoksmatrestapiAddSharedMailboxEmail(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKoksmatrestapiAddSharedMailboxEmailRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewKoksmatrestapiSigninRequest calls the generic KoksmatrestapiSignin builder with application/json body
func NewKoksmatrestapiSigninRequest(server string, body KoksmatrestapiSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewKoksmatrestapiSigninRequestWithBody generates requests for KoksmatrestapiSignin with any type of body
func NewKoksmatrestapiSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKoksmatrestapiResolveAddressRequest generates requests for KoksmatrestapiResolveAddress
func NewKoksmatrestapiResolveAddressRequest(server string, address string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/addresses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiGetInfoRequest generates requests for KoksmatrestapiGetInfo
func NewKoksmatrestapiGetInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/info/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiGetDomainsRequest generates requests for KoksmatrestapiGetDomains
func NewKoksmatrestapiGetDomainsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/info/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiListSharedMailboxRequest generates requests for KoksmatrestapiListSharedMailbox
func NewKoksmatrestapiListSharedMailboxRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiCreateSharedMailboxRequest calls the generic KoksmatrestapiCreateSharedMailbox builder with application/json body
func NewKoksmatrestapiCreateSharedMailboxRequest(server string, body KoksmatrestapiCreateSharedMailboxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiCreateSharedMailboxRequestWithBody(server, "application/json", bodyReader)
}

// NewKoksmatrestapiCreateSharedMailboxRequestWithBody generates requests for KoksmatrestapiCreateSharedMailbox with any type of body
func NewKoksmatrestapiCreateSharedMailboxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKoksmatrestapiDeleteSharedMailboxRequest generates requests for KoksmatrestapiDeleteSharedMailbox
func NewKoksmatrestapiDeleteSharedMailboxRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiGetSharedMailboxRequest generates requests for KoksmatrestapiGetSharedMailbox
func NewKoksmatrestapiGetSharedMailboxRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiUpdateSharedMailboxRequest calls the generic KoksmatrestapiUpdateSharedMailbox builder with application/json body
func NewKoksmatrestapiUpdateSharedMailboxRequest(server string, id string, body KoksmatrestapiUpdateSharedMailboxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiUpdateSharedMailboxRequestWithBody(server, id, "application/json", bodyReader)
}

// NewKoksmatrestapiUpdateSharedMailboxRequestWithBody generates requests for KoksmatrestapiUpdateSharedMailbox with any type of body
func NewKoksmatrestapiUpdateSharedMailboxRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKoksmatrestapiRemoveSharedMailboxMembersRequest generates requests for KoksmatrestapiRemoveSharedMailboxMembers
func NewKoksmatrestapiRemoveSharedMailboxMembersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiAddSharedMailboxMembersRequest calls the generic KoksmatrestapiAddSharedMailboxMembers builder with application/json body
func NewKoksmatrestapiAddSharedMailboxMembersRequest(server string, id string, body KoksmatrestapiAddSharedMailboxMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiAddSharedMailboxMembersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewKoksmatrestapiAddSharedMailboxMembersRequestWithBody generates requests for KoksmatrestapiAddSharedMailboxMembers with any type of body
func NewKoksmatrestapiAddSharedMailboxMembersRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKoksmatrestapiSetSharedMailboxOwnersRequest calls the generic KoksmatrestapiSetSharedMailboxOwners builder with application/json body
func NewKoksmatrestapiSetSharedMailboxOwnersRequest(server string, id string, body KoksmatrestapiSetSharedMailboxOwnersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiSetSharedMailboxOwnersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewKoksmatrestapiSetSharedMailboxOwnersRequestWithBody generates requests for KoksmatrestapiSetSharedMailboxOwners with any type of body
func NewKoksmatrestapiSetSharedMailboxOwnersRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/owners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressRequest calls the generic KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress builder with application/json body
func NewKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressRequest(server string, id string, body KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressRequestWithBody(server, id, "application/json", bodyReader)
}

// NewKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressRequestWithBody generates requests for KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress with any type of body
func NewKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/primarysmtp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKoksmatrestapiRemoveSharedMailboxReadersRequest generates requests for KoksmatrestapiRemoveSharedMailboxReaders
func NewKoksmatrestapiRemoveSharedMailboxReadersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/readers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiAddSharedMailboxReadersRequest calls the generic KoksmatrestapiAddSharedMailboxReaders builder with application/json body
func NewKoksmatrestapiAddSharedMailboxReadersRequest(server string, id string, body KoksmatrestapiAddSharedMailboxReadersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiAddSharedMailboxReadersRequestWithBody(server, id, "application/json", bodyReader)
}

// NewKoksmatrestapiAddSharedMailboxReadersRequestWithBody generates requests for KoksmatrestapiAddSharedMailboxReaders with any type of body
func NewKoksmatrestapiAddSharedMailboxReadersRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/readers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewKoksmatrestapiRemoveSharedMailboxEmailRequest generates requests for KoksmatrestapiRemoveSharedMailboxEmail
func NewKoksmatrestapiRemoveSharedMailboxEmailRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/smtp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKoksmatrestapiAddSharedMailboxEmailRequest calls the generic KoksmatrestapiAddSharedMailboxEmail builder with application/json body
func NewKoksmatrestapiAddSharedMailboxEmailRequest(server string, id string, body KoksmatrestapiAddSharedMailboxEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewKoksmatrestapiAddSharedMailboxEmailRequestWithBody(server, id, "application/json", bodyReader)
}

// NewKoksmatrestapiAddSharedMailboxEmailRequestWithBody generates requests for KoksmatrestapiAddSharedMailboxEmail with any type of body
func NewKoksmatrestapiAddSharedMailboxEmailRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedmailboxes/%s/smtp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// KoksmatrestapiSignin request with any body
	KoksmatrestapiSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiSigninResponse, error)

	KoksmatrestapiSigninWithResponse(ctx context.Context, body KoksmatrestapiSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiSigninResponse, error)

	// KoksmatrestapiResolveAddress request
	KoksmatrestapiResolveAddressWithResponse(ctx context.Context, address string, reqEditors ...RequestEditorFn) (*KoksmatrestapiResolveAddressResponse, error)

	// KoksmatrestapiGetInfo request
	KoksmatrestapiGetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KoksmatrestapiGetInfoResponse, error)

	// KoksmatrestapiGetDomains request
	KoksmatrestapiGetDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KoksmatrestapiGetDomainsResponse, error)

	// KoksmatrestapiListSharedMailbox request
	KoksmatrestapiListSharedMailboxWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KoksmatrestapiListSharedMailboxResponse, error)

	// KoksmatrestapiCreateSharedMailbox request with any body
	KoksmatrestapiCreateSharedMailboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiCreateSharedMailboxResponse, error)

	KoksmatrestapiCreateSharedMailboxWithResponse(ctx context.Context, body KoksmatrestapiCreateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiCreateSharedMailboxResponse, error)

	// KoksmatrestapiDeleteSharedMailbox request
	KoksmatrestapiDeleteSharedMailboxWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiDeleteSharedMailboxResponse, error)

	// KoksmatrestapiGetSharedMailbox request
	KoksmatrestapiGetSharedMailboxWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiGetSharedMailboxResponse, error)

	// KoksmatrestapiUpdateSharedMailbox request with any body
	KoksmatrestapiUpdateSharedMailboxWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxResponse, error)

	KoksmatrestapiUpdateSharedMailboxWithResponse(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxResponse, error)

	// KoksmatrestapiRemoveSharedMailboxMembers request
	KoksmatrestapiRemoveSharedMailboxMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiRemoveSharedMailboxMembersResponse, error)

	// KoksmatrestapiAddSharedMailboxMembers request with any body
	KoksmatrestapiAddSharedMailboxMembersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxMembersResponse, error)

	KoksmatrestapiAddSharedMailboxMembersWithResponse(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxMembersResponse, error)

	// KoksmatrestapiSetSharedMailboxOwners request with any body
	KoksmatrestapiSetSharedMailboxOwnersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiSetSharedMailboxOwnersResponse, error)

	KoksmatrestapiSetSharedMailboxOwnersWithResponse(ctx context.Context, id string, body KoksmatrestapiSetSharedMailboxOwnersJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiSetSharedMailboxOwnersResponse, error)

	// KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress request with any body
	KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse, error)

	KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithResponse(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse, error)

	// KoksmatrestapiRemoveSharedMailboxReaders request
	KoksmatrestapiRemoveSharedMailboxReadersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiRemoveSharedMailboxReadersResponse, error)

	// KoksmatrestapiAddSharedMailboxReaders request with any body
	KoksmatrestapiAddSharedMailboxReadersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxReadersResponse, error)

	KoksmatrestapiAddSharedMailboxReadersWithResponse(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxReadersJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxReadersResponse, error)

	// KoksmatrestapiRemoveSharedMailboxEmail request
	KoksmatrestapiRemoveSharedMailboxEmailWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiRemoveSharedMailboxEmailResponse, error)

	// KoksmatrestapiAddSharedMailboxEmail request with any body
	KoksmatrestapiAddSharedMailboxEmailWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxEmailResponse, error)

	KoksmatrestapiAddSharedMailboxEmailWithResponse(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxEmailResponse, error)
}

type KoksmatrestapiSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestapiSigninResponse
	JSON400      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiResolveAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelRecipient
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiResolveAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiResolveAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiGetInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RestapiInfoResponse
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiGetInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiGetInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiGetDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PowershellDomain
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiGetDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiGetDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiListSharedMailboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiListSharedMailboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiListSharedMailboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiCreateSharedMailboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiCreateSharedMailboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiCreateSharedMailboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiDeleteSharedMailboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiDeleteSharedMailboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiDeleteSharedMailboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiGetSharedMailboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiGetSharedMailboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiGetSharedMailboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiUpdateSharedMailboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiUpdateSharedMailboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiUpdateSharedMailboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiRemoveSharedMailboxMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiRemoveSharedMailboxMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiRemoveSharedMailboxMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiAddSharedMailboxMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiAddSharedMailboxMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiAddSharedMailboxMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiSetSharedMailboxOwnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiSetSharedMailboxOwnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiSetSharedMailboxOwnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiRemoveSharedMailboxReadersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiRemoveSharedMailboxReadersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiRemoveSharedMailboxReadersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiAddSharedMailboxReadersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailbox
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiAddSharedMailboxReadersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiAddSharedMailboxReadersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiRemoveSharedMailboxEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiRemoveSharedMailboxEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiRemoveSharedMailboxEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KoksmatrestapiAddSharedMailboxEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelSharedMailboxNewResponce
	JSON400      *RestErrResponse
	JSON401      *RestErrResponse
}

// Status returns HTTPResponse.Status
func (r KoksmatrestapiAddSharedMailboxEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KoksmatrestapiAddSharedMailboxEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// KoksmatrestapiSigninWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiSigninResponse
func (c *ClientWithResponses) KoksmatrestapiSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiSigninResponse, error) {
	rsp, err := c.KoksmatrestapiSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiSigninResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiSigninWithResponse(ctx context.Context, body KoksmatrestapiSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiSigninResponse, error) {
	rsp, err := c.KoksmatrestapiSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiSigninResponse(rsp)
}

// KoksmatrestapiResolveAddressWithResponse request returning *KoksmatrestapiResolveAddressResponse
func (c *ClientWithResponses) KoksmatrestapiResolveAddressWithResponse(ctx context.Context, address string, reqEditors ...RequestEditorFn) (*KoksmatrestapiResolveAddressResponse, error) {
	rsp, err := c.KoksmatrestapiResolveAddress(ctx, address, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiResolveAddressResponse(rsp)
}

// KoksmatrestapiGetInfoWithResponse request returning *KoksmatrestapiGetInfoResponse
func (c *ClientWithResponses) KoksmatrestapiGetInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KoksmatrestapiGetInfoResponse, error) {
	rsp, err := c.KoksmatrestapiGetInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiGetInfoResponse(rsp)
}

// KoksmatrestapiGetDomainsWithResponse request returning *KoksmatrestapiGetDomainsResponse
func (c *ClientWithResponses) KoksmatrestapiGetDomainsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KoksmatrestapiGetDomainsResponse, error) {
	rsp, err := c.KoksmatrestapiGetDomains(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiGetDomainsResponse(rsp)
}

// KoksmatrestapiListSharedMailboxWithResponse request returning *KoksmatrestapiListSharedMailboxResponse
func (c *ClientWithResponses) KoksmatrestapiListSharedMailboxWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*KoksmatrestapiListSharedMailboxResponse, error) {
	rsp, err := c.KoksmatrestapiListSharedMailbox(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiListSharedMailboxResponse(rsp)
}

// KoksmatrestapiCreateSharedMailboxWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiCreateSharedMailboxResponse
func (c *ClientWithResponses) KoksmatrestapiCreateSharedMailboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiCreateSharedMailboxResponse, error) {
	rsp, err := c.KoksmatrestapiCreateSharedMailboxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiCreateSharedMailboxResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiCreateSharedMailboxWithResponse(ctx context.Context, body KoksmatrestapiCreateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiCreateSharedMailboxResponse, error) {
	rsp, err := c.KoksmatrestapiCreateSharedMailbox(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiCreateSharedMailboxResponse(rsp)
}

// KoksmatrestapiDeleteSharedMailboxWithResponse request returning *KoksmatrestapiDeleteSharedMailboxResponse
func (c *ClientWithResponses) KoksmatrestapiDeleteSharedMailboxWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiDeleteSharedMailboxResponse, error) {
	rsp, err := c.KoksmatrestapiDeleteSharedMailbox(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiDeleteSharedMailboxResponse(rsp)
}

// KoksmatrestapiGetSharedMailboxWithResponse request returning *KoksmatrestapiGetSharedMailboxResponse
func (c *ClientWithResponses) KoksmatrestapiGetSharedMailboxWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiGetSharedMailboxResponse, error) {
	rsp, err := c.KoksmatrestapiGetSharedMailbox(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiGetSharedMailboxResponse(rsp)
}

// KoksmatrestapiUpdateSharedMailboxWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiUpdateSharedMailboxResponse
func (c *ClientWithResponses) KoksmatrestapiUpdateSharedMailboxWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxResponse, error) {
	rsp, err := c.KoksmatrestapiUpdateSharedMailboxWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiUpdateSharedMailboxResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiUpdateSharedMailboxWithResponse(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxResponse, error) {
	rsp, err := c.KoksmatrestapiUpdateSharedMailbox(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiUpdateSharedMailboxResponse(rsp)
}

// KoksmatrestapiRemoveSharedMailboxMembersWithResponse request returning *KoksmatrestapiRemoveSharedMailboxMembersResponse
func (c *ClientWithResponses) KoksmatrestapiRemoveSharedMailboxMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiRemoveSharedMailboxMembersResponse, error) {
	rsp, err := c.KoksmatrestapiRemoveSharedMailboxMembers(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiRemoveSharedMailboxMembersResponse(rsp)
}

// KoksmatrestapiAddSharedMailboxMembersWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiAddSharedMailboxMembersResponse
func (c *ClientWithResponses) KoksmatrestapiAddSharedMailboxMembersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxMembersResponse, error) {
	rsp, err := c.KoksmatrestapiAddSharedMailboxMembersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiAddSharedMailboxMembersResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiAddSharedMailboxMembersWithResponse(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxMembersResponse, error) {
	rsp, err := c.KoksmatrestapiAddSharedMailboxMembers(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiAddSharedMailboxMembersResponse(rsp)
}

// KoksmatrestapiSetSharedMailboxOwnersWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiSetSharedMailboxOwnersResponse
func (c *ClientWithResponses) KoksmatrestapiSetSharedMailboxOwnersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiSetSharedMailboxOwnersResponse, error) {
	rsp, err := c.KoksmatrestapiSetSharedMailboxOwnersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiSetSharedMailboxOwnersResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiSetSharedMailboxOwnersWithResponse(ctx context.Context, id string, body KoksmatrestapiSetSharedMailboxOwnersJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiSetSharedMailboxOwnersResponse, error) {
	rsp, err := c.KoksmatrestapiSetSharedMailboxOwners(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiSetSharedMailboxOwnersResponse(rsp)
}

// KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse
func (c *ClientWithResponses) KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse, error) {
	rsp, err := c.KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithResponse(ctx context.Context, id string, body KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse, error) {
	rsp, err := c.KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse(rsp)
}

// KoksmatrestapiRemoveSharedMailboxReadersWithResponse request returning *KoksmatrestapiRemoveSharedMailboxReadersResponse
func (c *ClientWithResponses) KoksmatrestapiRemoveSharedMailboxReadersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiRemoveSharedMailboxReadersResponse, error) {
	rsp, err := c.KoksmatrestapiRemoveSharedMailboxReaders(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiRemoveSharedMailboxReadersResponse(rsp)
}

// KoksmatrestapiAddSharedMailboxReadersWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiAddSharedMailboxReadersResponse
func (c *ClientWithResponses) KoksmatrestapiAddSharedMailboxReadersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxReadersResponse, error) {
	rsp, err := c.KoksmatrestapiAddSharedMailboxReadersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiAddSharedMailboxReadersResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiAddSharedMailboxReadersWithResponse(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxReadersJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxReadersResponse, error) {
	rsp, err := c.KoksmatrestapiAddSharedMailboxReaders(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiAddSharedMailboxReadersResponse(rsp)
}

// KoksmatrestapiRemoveSharedMailboxEmailWithResponse request returning *KoksmatrestapiRemoveSharedMailboxEmailResponse
func (c *ClientWithResponses) KoksmatrestapiRemoveSharedMailboxEmailWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*KoksmatrestapiRemoveSharedMailboxEmailResponse, error) {
	rsp, err := c.KoksmatrestapiRemoveSharedMailboxEmail(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiRemoveSharedMailboxEmailResponse(rsp)
}

// KoksmatrestapiAddSharedMailboxEmailWithBodyWithResponse request with arbitrary body returning *KoksmatrestapiAddSharedMailboxEmailResponse
func (c *ClientWithResponses) KoksmatrestapiAddSharedMailboxEmailWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxEmailResponse, error) {
	rsp, err := c.KoksmatrestapiAddSharedMailboxEmailWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiAddSharedMailboxEmailResponse(rsp)
}

func (c *ClientWithResponses) KoksmatrestapiAddSharedMailboxEmailWithResponse(ctx context.Context, id string, body KoksmatrestapiAddSharedMailboxEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*KoksmatrestapiAddSharedMailboxEmailResponse, error) {
	rsp, err := c.KoksmatrestapiAddSharedMailboxEmail(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKoksmatrestapiAddSharedMailboxEmailResponse(rsp)
}

// ParseKoksmatrestapiSigninResponse parses an HTTP response from a KoksmatrestapiSigninWithResponse call
func ParseKoksmatrestapiSigninResponse(rsp *http.Response) (*KoksmatrestapiSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestapiSigninResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiResolveAddressResponse parses an HTTP response from a KoksmatrestapiResolveAddressWithResponse call
func ParseKoksmatrestapiResolveAddressResponse(rsp *http.Response) (*KoksmatrestapiResolveAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiResolveAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelRecipient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiGetInfoResponse parses an HTTP response from a KoksmatrestapiGetInfoWithResponse call
func ParseKoksmatrestapiGetInfoResponse(rsp *http.Response) (*KoksmatrestapiGetInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiGetInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RestapiInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiGetDomainsResponse parses an HTTP response from a KoksmatrestapiGetDomainsWithResponse call
func ParseKoksmatrestapiGetDomainsResponse(rsp *http.Response) (*KoksmatrestapiGetDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiGetDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PowershellDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiListSharedMailboxResponse parses an HTTP response from a KoksmatrestapiListSharedMailboxWithResponse call
func ParseKoksmatrestapiListSharedMailboxResponse(rsp *http.Response) (*KoksmatrestapiListSharedMailboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiListSharedMailboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiCreateSharedMailboxResponse parses an HTTP response from a KoksmatrestapiCreateSharedMailboxWithResponse call
func ParseKoksmatrestapiCreateSharedMailboxResponse(rsp *http.Response) (*KoksmatrestapiCreateSharedMailboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiCreateSharedMailboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiDeleteSharedMailboxResponse parses an HTTP response from a KoksmatrestapiDeleteSharedMailboxWithResponse call
func ParseKoksmatrestapiDeleteSharedMailboxResponse(rsp *http.Response) (*KoksmatrestapiDeleteSharedMailboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiDeleteSharedMailboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiGetSharedMailboxResponse parses an HTTP response from a KoksmatrestapiGetSharedMailboxWithResponse call
func ParseKoksmatrestapiGetSharedMailboxResponse(rsp *http.Response) (*KoksmatrestapiGetSharedMailboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiGetSharedMailboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiUpdateSharedMailboxResponse parses an HTTP response from a KoksmatrestapiUpdateSharedMailboxWithResponse call
func ParseKoksmatrestapiUpdateSharedMailboxResponse(rsp *http.Response) (*KoksmatrestapiUpdateSharedMailboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiUpdateSharedMailboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiRemoveSharedMailboxMembersResponse parses an HTTP response from a KoksmatrestapiRemoveSharedMailboxMembersWithResponse call
func ParseKoksmatrestapiRemoveSharedMailboxMembersResponse(rsp *http.Response) (*KoksmatrestapiRemoveSharedMailboxMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiRemoveSharedMailboxMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiAddSharedMailboxMembersResponse parses an HTTP response from a KoksmatrestapiAddSharedMailboxMembersWithResponse call
func ParseKoksmatrestapiAddSharedMailboxMembersResponse(rsp *http.Response) (*KoksmatrestapiAddSharedMailboxMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiAddSharedMailboxMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiSetSharedMailboxOwnersResponse parses an HTTP response from a KoksmatrestapiSetSharedMailboxOwnersWithResponse call
func ParseKoksmatrestapiSetSharedMailboxOwnersResponse(rsp *http.Response) (*KoksmatrestapiSetSharedMailboxOwnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiSetSharedMailboxOwnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse parses an HTTP response from a KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressWithResponse call
func ParseKoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse(rsp *http.Response) (*KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiRemoveSharedMailboxReadersResponse parses an HTTP response from a KoksmatrestapiRemoveSharedMailboxReadersWithResponse call
func ParseKoksmatrestapiRemoveSharedMailboxReadersResponse(rsp *http.Response) (*KoksmatrestapiRemoveSharedMailboxReadersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiRemoveSharedMailboxReadersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiAddSharedMailboxReadersResponse parses an HTTP response from a KoksmatrestapiAddSharedMailboxReadersWithResponse call
func ParseKoksmatrestapiAddSharedMailboxReadersResponse(rsp *http.Response) (*KoksmatrestapiAddSharedMailboxReadersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiAddSharedMailboxReadersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailbox
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiRemoveSharedMailboxEmailResponse parses an HTTP response from a KoksmatrestapiRemoveSharedMailboxEmailWithResponse call
func ParseKoksmatrestapiRemoveSharedMailboxEmailResponse(rsp *http.Response) (*KoksmatrestapiRemoveSharedMailboxEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiRemoveSharedMailboxEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKoksmatrestapiAddSharedMailboxEmailResponse parses an HTTP response from a KoksmatrestapiAddSharedMailboxEmailWithResponse call
func ParseKoksmatrestapiAddSharedMailboxEmailResponse(rsp *http.Response) (*KoksmatrestapiAddSharedMailboxEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KoksmatrestapiAddSharedMailboxEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelSharedMailboxNewResponce
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RestErrResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticating app
	// (POST /authorize)
	KoksmatrestapiSignin(ctx echo.Context) error
	// Lookup an address
	// (GET /v1/addresses/{address})
	KoksmatrestapiResolveAddress(ctx echo.Context, address string) error
	// Get runtime info
	// (GET /v1/info/)
	KoksmatrestapiGetInfo(ctx echo.Context) error
	// Get supported domains
	// (GET /v1/info/domains)
	KoksmatrestapiGetDomains(ctx echo.Context) error
	// Get Shared Mailboxes
	// (GET /v1/sharedmailboxes/)
	KoksmatrestapiListSharedMailbox(ctx echo.Context) error
	// Create a Shared Mailbox
	// (POST /v1/sharedmailboxes/)
	KoksmatrestapiCreateSharedMailbox(ctx echo.Context) error
	// Delete a shared Mailboxes
	// (DELETE /v1/sharedmailboxes/{id})
	KoksmatrestapiDeleteSharedMailbox(ctx echo.Context, id string) error
	// Get a Shared Mailbox
	// (GET /v1/sharedmailboxes/{id})
	KoksmatrestapiGetSharedMailbox(ctx echo.Context, id string) error
	// Update a Shared Mailbox
	// (PATCH /v1/sharedmailboxes/{id})
	KoksmatrestapiUpdateSharedMailbox(ctx echo.Context, id string) error
	// Removes members from a Shared Mailbox
	// (DELETE /v1/sharedmailboxes/{id}/members)
	KoksmatrestapiRemoveSharedMailboxMembers(ctx echo.Context, id string) error
	// Add members to a Shared Mailbox
	// (POST /v1/sharedmailboxes/{id}/members)
	KoksmatrestapiAddSharedMailboxMembers(ctx echo.Context, id string) error
	// Add owners to a Shared Mailbox
	// (PATCH /v1/sharedmailboxes/{id}/owners)
	KoksmatrestapiSetSharedMailboxOwners(ctx echo.Context, id string) error
	// Update a Shared Mailbox primary smtp address
	// (PATCH /v1/sharedmailboxes/{id}/primarysmtp)
	KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress(ctx echo.Context, id string) error
	// Removes readers from a Shared Mailbox
	// (DELETE /v1/sharedmailboxes/{id}/readers)
	KoksmatrestapiRemoveSharedMailboxReaders(ctx echo.Context, id string) error
	// Add readers to a Shared Mailbox
	// (POST /v1/sharedmailboxes/{id}/readers)
	KoksmatrestapiAddSharedMailboxReaders(ctx echo.Context, id string) error
	// Removes a smtp address from a Shared Mailbox [NOT IMPLEMENTED]
	// (DELETE /v1/sharedmailboxes/{id}/smtp)
	KoksmatrestapiRemoveSharedMailboxEmail(ctx echo.Context, id string) error
	// Add a smtp address to a Shared Mailbox [NOT IMPLEMENTED]
	// (POST /v1/sharedmailboxes/{id}/smtp)
	KoksmatrestapiAddSharedMailboxEmail(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// KoksmatrestapiSignin converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiSignin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiSignin(ctx)
	return err
}

// KoksmatrestapiResolveAddress converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiResolveAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiResolveAddress(ctx, address)
	return err
}

// KoksmatrestapiGetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiGetInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiGetInfo(ctx)
	return err
}

// KoksmatrestapiGetDomains converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiGetDomains(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiGetDomains(ctx)
	return err
}

// KoksmatrestapiListSharedMailbox converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiListSharedMailbox(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiListSharedMailbox(ctx)
	return err
}

// KoksmatrestapiCreateSharedMailbox converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiCreateSharedMailbox(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiCreateSharedMailbox(ctx)
	return err
}

// KoksmatrestapiDeleteSharedMailbox converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiDeleteSharedMailbox(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiDeleteSharedMailbox(ctx, id)
	return err
}

// KoksmatrestapiGetSharedMailbox converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiGetSharedMailbox(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiGetSharedMailbox(ctx, id)
	return err
}

// KoksmatrestapiUpdateSharedMailbox converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiUpdateSharedMailbox(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiUpdateSharedMailbox(ctx, id)
	return err
}

// KoksmatrestapiRemoveSharedMailboxMembers converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiRemoveSharedMailboxMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiRemoveSharedMailboxMembers(ctx, id)
	return err
}

// KoksmatrestapiAddSharedMailboxMembers converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiAddSharedMailboxMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiAddSharedMailboxMembers(ctx, id)
	return err
}

// KoksmatrestapiSetSharedMailboxOwners converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiSetSharedMailboxOwners(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiSetSharedMailboxOwners(ctx, id)
	return err
}

// KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress(ctx, id)
	return err
}

// KoksmatrestapiRemoveSharedMailboxReaders converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiRemoveSharedMailboxReaders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiRemoveSharedMailboxReaders(ctx, id)
	return err
}

// KoksmatrestapiAddSharedMailboxReaders converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiAddSharedMailboxReaders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiAddSharedMailboxReaders(ctx, id)
	return err
}

// KoksmatrestapiRemoveSharedMailboxEmail converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiRemoveSharedMailboxEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiRemoveSharedMailboxEmail(ctx, id)
	return err
}

// KoksmatrestapiAddSharedMailboxEmail converts echo context to params.
func (w *ServerInterfaceWrapper) KoksmatrestapiAddSharedMailboxEmail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KoksmatrestapiAddSharedMailboxEmail(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorize", wrapper.KoksmatrestapiSignin)
	router.GET(baseURL+"/v1/addresses/:address", wrapper.KoksmatrestapiResolveAddress)
	router.GET(baseURL+"/v1/info/", wrapper.KoksmatrestapiGetInfo)
	router.GET(baseURL+"/v1/info/domains", wrapper.KoksmatrestapiGetDomains)
	router.GET(baseURL+"/v1/sharedmailboxes/", wrapper.KoksmatrestapiListSharedMailbox)
	router.POST(baseURL+"/v1/sharedmailboxes/", wrapper.KoksmatrestapiCreateSharedMailbox)
	router.DELETE(baseURL+"/v1/sharedmailboxes/:id", wrapper.KoksmatrestapiDeleteSharedMailbox)
	router.GET(baseURL+"/v1/sharedmailboxes/:id", wrapper.KoksmatrestapiGetSharedMailbox)
	router.PATCH(baseURL+"/v1/sharedmailboxes/:id", wrapper.KoksmatrestapiUpdateSharedMailbox)
	router.DELETE(baseURL+"/v1/sharedmailboxes/:id/members", wrapper.KoksmatrestapiRemoveSharedMailboxMembers)
	router.POST(baseURL+"/v1/sharedmailboxes/:id/members", wrapper.KoksmatrestapiAddSharedMailboxMembers)
	router.PATCH(baseURL+"/v1/sharedmailboxes/:id/owners", wrapper.KoksmatrestapiSetSharedMailboxOwners)
	router.PATCH(baseURL+"/v1/sharedmailboxes/:id/primarysmtp", wrapper.KoksmatrestapiUpdateSharedMailboxPrimaryEmailAddress)
	router.DELETE(baseURL+"/v1/sharedmailboxes/:id/readers", wrapper.KoksmatrestapiRemoveSharedMailboxReaders)
	router.POST(baseURL+"/v1/sharedmailboxes/:id/readers", wrapper.KoksmatrestapiAddSharedMailboxReaders)
	router.DELETE(baseURL+"/v1/sharedmailboxes/:id/smtp", wrapper.KoksmatrestapiRemoveSharedMailboxEmail)
	router.POST(baseURL+"/v1/sharedmailboxes/:id/smtp", wrapper.KoksmatrestapiAddSharedMailboxEmail)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb0W7buBL9FYK5D/cCrp00vffBT9etgyJonQRJusAiCRaMOJbYSCSXpNx4A/9Vv6Bf",
	"tiApy7IlObYTu01Wb46k4Yxnzpw5pJUHHIhECg7caNx9wDqIICHu40BQiM8hYJIBN/aKVEKCMgzc/V7M",
	"/INmLAF3sTaK8RBPWrjPtIzJ+IQkUHffMB6mTEdAa586SgiLe5Qq0Np7ZAaSao88jWNyGwPuGpVCa/oA",
	"UYqM3Vr3BhQncZ8pCIxQ49PbrxCYY1q52jEFbpgZV97MM3I5ltAHQ1hcHVOggBigfxCXu6FQif2EKTHw",
	"xrAEcKtsw1xA/1IwxF2815nVppMVpnOmWMIMG0H2DfrWLJV0TVeT/Ipw69hVXMEvIqKADgiLb8V9uegf",
	"Um1E0jNGsdvUwMFG9T+6DyLCQ1haBPtFiRpfJEZmIHitWT6Bb+egpeABlBMuV0lDlZ8z8Q2UjiCO+yIh",
	"jJeX9tfru9TdvnSXq5pE/0ZiVqzdrRAxEF4TTimjxYZOGGdJmuDufm7KuIEQ1CrdfQ7aHCnlk6grkhgI",
	"6q5S0IFi0jDBcRf3pIxZQOxfb7SEgA1ZgEApoZA1aOOqWALBDdw7BBBKmTUm8VnR26RV7wdl5oW1Zyly",
	"rsthHrmIEtCahMWgZqXQhphUly0v3HW04HAZaGwmiWTHfCjqs2mAEz8QSpGMQGnn+2ENb3PN0KPUEf/5",
	"nynoiqmjEyPJWo1Q42UAyS2oOjeJu/ukqbNhLLbh3pYDEt/4z4vnsByPAkJ3FJDjx5o6kVoRQh8ZQs9Q",
	"4Rbmdas/vVytXab4ixtttVlensuNnNTAfPP2ZiFnvB4nUt7BeLMla3lQ3MFqVGc5GoJUMTO+sArD278H",
	"okDlqtuNUH8pXyAyRuKJtWd8KMoMf82vzTW/ADViASA0tIOCcBIyHqIBC5TQYmjQ4f/+ixRokaoA9DW/",
	"5nt76CMYq8GRNkQZoMhf3kO91ERW/fp5dc1/FyniABQRFChwwpjE6A7GyAhEggC0RiYC1Ds7bqPLCIpP",
	"MY2Y1img2zG64gxi3f4qIsI18P9zuGehEqlsByK5+belfCO6yx76T9vG+EWD81cOJgSDCM9jssVBJlIi",
	"DSNn0RkddEhqIqHYX4CAUyQF48ZHPWfFNBpZbePyebCPEsZTA9r5PyPZF5634D4J2fJ+1keufxHRiCBf",
	"62lUpczZOtqqM2M7GX8SdzohBg1IyAKrwwuTFY8O2vvtfUcyEjiRDHfxYXu/fYhbWBITOWzNvqnDrfA9",
	"UQJPobwc/fjuu+THd1RX3OIj26zuQigvvLT8mmNXLeWs7YZnWmJVpBpsOd8R2HtBx164cpNtvslMRXa+",
	"aq+x/Hblsc1MJUNOHKuojNwcZt7u72/LZ0ahzuc8CE8/WSS/e2bXxd1AhdP3hKJZIlpYp4ndZFmtXqA/",
	"HiIipW1LEmrcvcLz3IhvrKmD3vSQovOQfZzYIENw32RZ3c9Bi3gE052dbWBFEjBu7F89YLttc02Np1oD",
	"k/xZixWmgE5H/yw9iwPpZouVXjgm+iVLbL0f7NL7F57TEZ0b/66q08F/dWMrMwPfZyHuUumYLi9yjr38",
	"ICyHnZUEnRWB9hGM3dTh7bf83N6xQcPmaPgIBqmUG5YAYr52UzC4Us7jgLrTGr06HPqZwRMRke9Mlh6n",
	"LZ5FTUoblQYnT8GJTqUUTsfTvKzVYNFuR5b4HRnoIn/MB/OZaYNIHCO/h0ODqckjUsbazR8i7wJhFWfX",
	"DcaeF2MVOJhCrHTrZtKq2XR8cOf1iCws9wiovFUZVtsTyzUHUFuWzVUwbmC7MWzrwbYEuTVE+cDoxMM5",
	"BgOPDdi+e2oRsI+re0Z3Kuwbbv35IPVQQQTpNQl2NZ33y2Ow4cOdjvH1yNAdKQZReY77w3y97iD3ZrvB",
	"5G7EwfxPJ40+eEn94Gv3fPqgU/hRcTWdcA6JGM33wyBbo6HqfzI0PTA0yhCFhkok63N3tgVbhsAepTuF",
	"325YefEFj4aXXxL4e5TmwDfiGfl59lpGLmuW/iy3IJ9Pvfmrag3/IkbTHy+tPzyUn7c9spdNdWLkyj1S",
	"oeizV3eLL3C/JpHfdMyrUfooQzyykK/41XXN/im8sbex/D/P1mjkfyP/NcoQtTv5v234/TSNc9gw9ovT",
	"OFP0P6vImaqbjRna6Zrd8PO78sHriUAfssI1QFqHSsnckK9mVHR1cnqJjgdnn48GRyeXR/2bbXDsdgG0",
	"M4Yt/p/Ozrm1+E9zDc0+jWYXOqOCbdfti8lk8ncAAAD//7Yk5KpaPAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
